SET(PPA_NAME "libbacktrace++")
SET(PPA_HOMEPAGE "https://github.com/28msec/libbacktrace")
SET(PPA_DISTROS "trusty;wily;xenial")
SET(PPA_MAINTAINER "Federico Cavalieri <f@28.io>")

#SET(PPA_HOST "ppa:fcavalieri/experiments")
#SET(PPA_VERSION "1.0.1")
SET(PPA_HOST "ppa:fcavalieri/dependencies")
SET(PPA_VERSION "1.0.0")

SET(PPA_BUILD_DEPENDENCIES_trusty "debhelper (>= 9), cdbs, cmake, libdwarf-dev")
SET(PPA_DEPENDENCIES_trusty "\${shlibs:Depends}, \${misc:Depends}")

SET(PPA_BUILD_DEPENDENCIES_wily "debhelper (>= 9), cdbs, cmake, libdwarf-dev")
SET(PPA_DEPENDENCIES_wily "\${shlibs:Depends}, \${misc:Depends}")

SET(PPA_BUILD_DEPENDENCIES_xenial "debhelper (>= 9), cdbs, cmake, libdwarf-dev")
SET(PPA_DEPENDENCIES_xenial "\${shlibs:Depends}, \${misc:Depends}")


EXECUTE_PROCESS(COMMAND date -R OUTPUT_VARIABLE PPA_DATE_TIME)
SET(PPA_DIR "@CMAKE_CURRENT_BINARY_DIR@/ppaing")
SET(PPA_SOURCE_DIR "${PPA_DIR}/${PPA_NAME}-${PPA_VERSION}")
SET(PPA_DEBIAN_DIR "${PPA_SOURCE_DIR}/debian")
SET(PPA_DEBIAN_TEMPL_DIR "@CMAKE_CURRENT_SOURCE_DIR@/debian")
SET(PPA_INSTALL_PATH "/usr")



FILE(REMOVE_RECURSE ${PPA_DIR})
FILE(MAKE_DIRECTORY ${PPA_SOURCE_DIR})

MESSAGE(STATUS "Preparing sources for package ${PPA_NAME}.")
FILE(COPY @CMAKE_SOURCE_DIR@/.
  DESTINATION ${PPA_SOURCE_DIR}
  PATTERN "build" EXCLUDE
  PATTERN "*~" EXCLUDE
  PATTERN "*.swp" EXCLUDE
  PATTERN ".idea" EXCLUDE
  PATTERN ".git" EXCLUDE  
)

FILE(REMOVE_RECURSE ${PPA_DEBIAN_DIR})
FILE(MAKE_DIRECTORY ${PPA_DEBIAN_DIR})

MESSAGE(STATUS "Packing sources for PPA.")
EXECUTE_PROCESS(
  COMMAND tar czf ${PPA_NAME}_${PPA_VERSION}.orig.tar.gz  ${PPA_NAME}-${PPA_VERSION}
  WORKING_DIRECTORY ${PPA_DIR})

FOREACH(PPA_DISTRO ${PPA_DISTROS})
  SET(PPA_BUILD_DEPENDENCIES ${PPA_BUILD_DEPENDENCIES_${PPA_DISTRO}})
  MESSAGE(STATUS "Build dependencies for ${PPA_DISTRO}: ${PPA_BUILD_DEPENDENCIES}.")
  SET(PPA_DEPENDENCIES ${PPA_DEPENDENCIES_${PPA_DISTRO}})
  MESSAGE(STATUS "Dependencies for ${PPA_DISTRO}: ${PPA_DEPENDENCIES}.")

  EXECUTE_PROCESS(
    COMMAND cp ${PPA_NAME}_${PPA_VERSION}.orig.tar.gz ${PPA_NAME}_${PPA_VERSION}~${PPA_DISTRO}.orig.tar.gz
    WORKING_DIRECTORY ${PPA_DIR})

  MESSAGE(STATUS "Creating configration files for ${PPA_DISTRO}.")
  CONFIGURE_FILE(${PPA_DEBIAN_TEMPL_DIR}/changelog.in "${PPA_DEBIAN_DIR}/changelog" @ONLY)
  CONFIGURE_FILE(${PPA_DEBIAN_TEMPL_DIR}/copyright.in "${PPA_DEBIAN_DIR}/copyright" @ONLY)
  CONFIGURE_FILE(${PPA_DEBIAN_TEMPL_DIR}/control.in "${PPA_DEBIAN_DIR}/control" @ONLY)
  CONFIGURE_FILE(${PPA_DEBIAN_TEMPL_DIR}/rules.in "${PPA_DEBIAN_DIR}/rules" @ONLY)

  FILE(WRITE ${PPA_DEBIAN_DIR}/compat "9")
  FILE(WRITE ${PPA_DEBIAN_DIR}/source/format "3.0 (quilt)")

 MESSAGE(STATUS "Debian source package generation for ${PPA_DISTRO}.")
  EXECUTE_PROCESS(
  # params "-us -uc" skip signing the package
  COMMAND debuild -S
  #OUTPUT_VARIABLE DEBUILD_OUTPUT
  #ERROR_VARIABLE DEBUILD_OUTPUT
  RESULT_VARIABLE RETURN_CODE
  WORKING_DIRECTORY ${PPA_SOURCE_DIR})
  IF (NOT RETURN_CODE EQUAL 0)
    MESSAGE(FATAL_ERROR "Debian package generation failed")
  ENDIF (NOT RETURN_CODE EQUAL 0)
  SET(DEBIAN_CHANGES_FILE "${PPA_NAME}_${PPA_VERSION}~${PPA_DISTRO}_source.changes")
  MESSAGE(STATUS "dputting ${DEBIAN_CHANGES_FILE}.")
  EXECUTE_PROCESS(
    COMMAND dput ${PPA_HOST} ${DEBIAN_CHANGES_FILE}
    RESULT_VARIABLE RETURN_CODE
    WORKING_DIRECTORY ${PPA_DIR})
  IF (NOT RETURN_CODE EQUAL 0)
    MESSAGE(FATAL_ERROR "dputting failed")
  ENDIF (NOT RETURN_CODE EQUAL 0)

ENDFOREACH()